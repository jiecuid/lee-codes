
谈谈 Spring 的 IOC

    1. IOC(Inversion of Control)它的含义是控制反转, 是一种设计思想。我们在使用 Spring IOC 之前都是通过 new 去创建对象，对象的创建和对象的依赖关系完全硬编码在程序中，
对象的创建有程序自己控制。在使用了 Spring IOC之后，将创建对象的这个行为交给了第三方 Spring，当我们需要使用的时候，就去 Spring的IOC容器里去拿就可以了，这本身就是一个反转的过程。
所谓的控制反转：就是获得对象的方式反转了。

    2. IOC 是 Spring 框架的核心内容，使用了多种方式完美的实现了IOC,可以使用 XML 配置，也可以使用注解
    IOC容器里存储的是一个个 Bean 对象，Spring 容器在启动（初始化）的时候，会根据特定的规则去进行扫描，扫描当前应用是通过配置文件的形式配置的 Bean，还是通过注解的形式配置的Bean。

    当是通过配置文件的形式配置的 Bean 的时候，我们都知道可以将Bean 配置在xml文件里，也可以配置在yaml文件里，也可以配置在 property 等文件里，
Spring 会通过一个叫做 BeanDefinitionReader 接口 去读取相应的配置文件返回 BeanDefinitionRegistry, BeanDefinitionReader接口针对不同类型的配置文件会有相应的实现类，
比如读取 XML 文件，会通过XmlBeanDefinitionReader， 读取property 文件会通过 PropertyBeanDefinitionReader。
Spring 它会经过实例化-->填充属性-->初始化前-->初始化-->初始化后（这里如果需要AOP，就会进行AOP生成代理对象）等一系列的操作生成完整的 Bean对象，存入容器中，程序使用时再从Ioc容器中取出需要的对象。

    当是通过注解的形式配置的Bean的时候，Spring 会以另外一套机制去创建 Bean。首先 Spring 会去扫描配置类，通常也就是加了 @ComponentScan 注解的类，
读取 @ComponentScan 注解所配置的待扫描的包路径，在这个包路径下的所有java类都会被扫描一遍，判断这些java类上是否有 @Component 注解，如果有@Component 注解，
那么Spring就会认为这个类对应的 Bean 需要被放入到IOC容器里，Spring 就会经过实例化-->填充属性-->初始化前-->初始化-->初始化后（这里如果需要AOP，就会进行AOP生成代理对象）
等一系列的操作生成完整的 Bean对象，，存入容器中，程序使用时再从Ioc容器中取出需要的对象。

    3.DI(依赖注入)是实现IoC的一种方法
